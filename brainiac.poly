/* brainiac.c */                                           ║#  Brainiac.py                                           ║(* Brainiac.Mod *)                                       ║!brainiac.f90                                            ║// Brainiac.java                                         ║// brainiac.go                                                 
#include <stdint.h>                                        ║                                                         ║MODULE Brainiac;                                         ║PROGRAM Brainiac                                         ║public class Brainiac {                                  ║package main                                             
#include <stdbool.h>                                       ║import sys                                               ║                                                         ║implicit none                                            ║//import sys                                             ║import "fmt"                                                         
#include <stdio.h>                                         ║                                                         ║IMPORT Args := extArgs, Err := extErr, Out, Files;       ║                                                         ║                                                         ║import "os"                                             
#include <stdlib.h>                                        ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║CONST                                                    ║                                                         ║                                                         ║const (                                                    
#define SPD   40  // Synapses per Dendrite                 ║SPD = 40   # Synapses per Dendrite                       ║  SPD = 40; (* Synapses per Dendrite *)                  ║ integer, parameter :: SPD = 40                          ║  final static int SPD = 40; // Synapses per Dendrite    ║  SPD = 40  // Synapses per Dendrite                       
#define PPP   48  // Proximal per Pyramidal                ║PPP = 48   # Proximal per Pyramidal                      ║  PPP = 48; (* Proximal per Pyramidal *)                 ║ integer, parameter :: PPP = 48                          ║  final static int PPP = 48; // Proximal per Pyramidal   ║  PPP = 48  // Proximal per Pyramidal                      
#define BPP   48  // Basal per Pyramidal                   ║BPP = 48   # Basal per Pyramidal                         ║  BPP = 48; (* Basal per Pyramidal *)                    ║ integer, parameter :: BPP = 48                          ║  final static int BPP = 48; // Basal per Pyramidal      ║  BPP = 48  // Basal per Pyramidal                         
#define APP   48  // Apical per Pyramidal                  ║APP = 48   # Apical per Pyramidal                        ║  APP = 48; (* Apical per Pyramidal *)                   ║ integer, parameter :: APP = 48                          ║  final static int APP = 48; // Apical per Pyramidal     ║  APP = 48  // Apical per Pyramidal                        
#define PinL2   32  // Pyramidal in L2                     ║PinL2 = 32   # Pyramidal in L2                           ║  PinL2 = 32; (* Pyramidal in L2 *)                      ║ integer, parameter :: PinL2 = 32                        ║  final static int PinL2 = 32; // Pyramidal in L2        ║  PinL2 = 32  // Pyramidal in L2                           
#define PinL4   32  // Pyramidal in L4                     ║PinL4 = 32   # Pyramidal in L4                           ║  PinL4 = 32; (* Pyramidal in L4 *)                      ║ integer, parameter :: PinL4 = 32                        ║  final static int PinL4 = 32; // Pyramidal in L4        ║  PinL4 = 32  // Pyramidal in L4                           
#define PinL5   32  // Pyramidal in L5                     ║PinL5 = 32   # Pyramidal in L5                           ║  PinL5 = 32; (* Pyramidal in L5 *)                      ║ integer, parameter :: PinL5 = 32                        ║  final static int PinL5 = 32; // Pyramidal in L5        ║  PinL5 = 32  // Pyramidal in L5                           
#define PinL6   32  // Pyramidal in L6                     ║PinL6 = 32   # Pyramidal in L6                           ║  PinL6 = 32; (* Pyramidal in L6 *)                      ║ integer, parameter :: PinL6 = 32                        ║  final static int PinL6 = 32; // Pyramidal in L6        ║  PinL6 = 32  // Pyramidal in L6                           
#define PinTh   4   // Pyramidal in Thalmus                ║PinTh = 4    # Pyramidal in Thalmus                      ║  PinTh = 4;  (* Pyramidal in Thalmus *)                 ║ integer, parameter :: PinTh = 4                         ║  final static int PinTh = 4;  // Pyramidal in Thalmus   ║  PinTh = 4   // Pyramidal in Thalmus                      
#define MCinC   128 // Minicolumns in a Column             ║MCinC = 128  # Minicolumns in a Column                   ║  MCinC = 128;(* Minicolumns in a Column *)              ║ integer, parameter :: MCinC = 128                       ║  final static int MCinC = 128; // Minicolumns per Column║  MCinC = 128 // Minicolumns in a Column                   
#define CinP    9   // Columns in a Patch                  ║CinP = 9    # Columns in a Patch                         ║  CinP = 9 ; (* Columns in a Patch *)                    ║ integer, parameter :: CinP = 9                          ║  final static int CinP = 9  ; // Columns in a Patch     ║  CinP = 9    // Columns in a Patch                    
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║)                                                        
                                                           ║                                                         ║TYPE                                                     ║                                                         ║                                                         ║                                                         
typedef struct { bool Excited;} Potential;                 ║                                                         ║  Potential = RECORD Excited: BOOLEAN END;               ║                                                         ║  public static class Potential{                         ║type Potential struct { excited bool }                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    Boolean excited;                                     ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef int32_t Synapse;                                   ║                                                         ║  Synapse = INTEGER; (* PTR to Potential w/o GC *)       ║                                                         ║  public static class Synapse{                           ║type Synapse *Potential                                  
                                                           ║                                                         ║                                                         ║                                                         ║    int Potential;                                       ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct { Synapse s[SPD];} Dendrite;                ║class Dendrite:                                          ║  Dendrite = ARRAY SPD OF Synapse;                       ║                                                         ║  public static class Dendrite{                          ║type Dendrite [SPD]Synapse                                                                                  
                                                           ║  def __init__():                                        ║                                                         ║                                                         ║    Synapse s;                                           ║                                                         
                                                           ║    self.s = [  None    for i in range(SPD )]            ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    public Dendrite(){                                   ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
typedef struct {                                           ║class Pyramidal:                                         ║  Pyramidal = RECORD                                     ║                                                         ║  public static class Pyramidal{                         ║type Pyramidal struct {                                                                                     
       Potential State;                                    ║  def __init__():                                        ║             State: Potential;                           ║                                                         ║    int State;                                           ║       State Potential                                                                                      
       Dendrite Proximal[PPP];                             ║    self.State = 0                                       ║             Proximal:  ARRAY PPP OF Dendrite;           ║                                                         ║    Dendrite[] Proximal;                                 ║       Proximal [PPP]Dendrite                                                                               
       Dendrite Basal[BPP];                                ║    self.Proximal = [Dendrite() for i in range(PPP) ]    ║             Basal: ARRAY BPP OF Dendrite;               ║                                                         ║    Dendrite[] Basal;                                    ║       Basal [BPP]Dendrite                                                                                  
       Dendrite Apical[APP];                               ║    self.Basal = [Dendrite() for i in range(BPP) ]       ║             Apical: ARRAY APP OF Dendrite               ║                                                         ║    Dendrite[] Apical;                                   ║       Apical [APP]Dendrite                                                                                 
     } Pyramidal;                                          ║    self.Apical = [Dendrite() for i in range(APP) ]      ║           END;                                          ║                                                         ║                                                         ║     }                                                                                                      
                                                           ║                                                         ║                                                         ║                                                         ║    public Pyramidal(){                                  ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           State = 0;                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           Proximal = new Dendrite[PPP];                 ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           Basal = new Dendrite[BPP];                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           Apical = new Dendrite[APP];                   ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct {                                           ║class Minicolumn:                                        ║  Minicolumn = RECORD                                    ║                                                         ║  public static class Minicolumn{                        ║type Minicolumn struct {                                                                                    
         Pyramidal L2[PinL2];                              ║  def __init():                                          ║                 L2: ARRAY PinL2 OF Pyramidal;           ║                                                         ║    Pyramidal[] L2;                                      ║       L2 [PinL2]Pyramidal                                                       
         Pyramidal L4[PinL4];                              ║    self.L2 = [Pyramidal() for i in range(PinL2)]        ║                 L4: ARRAY PinL4 OF Pyramidal;           ║                                                         ║    Pyramidal[] L4;                                      ║       L4 [PinL4]Pyramidal                                                       
         Pyramidal L5[PinL5];                              ║    self.L4 = [Pyramidal() for i in range(PinL4)]        ║                 L5: ARRAY PinL5 OF Pyramidal;           ║                                                         ║    Pyramidal[] L5;                                      ║       L5 [PinL5]Pyramidal                                                       
         Pyramidal L6[PinL6];                              ║    self.L5 = [Pyramidal() for i in range(PinL5)]        ║                 L6: ARRAY PinL6 OF Pyramidal;           ║                                                         ║    Pyramidal[] L6;                                      ║       L6 [PinL6]Pyramidal                                                        
         Pyramidal Thalmus[PinTh];                         ║    self.L6 = [Pyramidal() for i in range(PinL6)]        ║                 Thalmus: ARRAY PinTh OF Pyramidal       ║                                                         ║    Pyramidal[] Thalmus;                                 ║       Thalmus [PinTh]Pyramidal                           
     } Minicolumn;                                         ║    self.Thalmus = [Pyramidal() for i in range(PinTh)]   ║               END;                                      ║                                                         ║                                                         ║     }                                                   
                                                           ║                                                         ║                                                         ║                                                         ║    public Minicolumn(){                                 ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           L2 = new Pyramidal[PinL2];                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           L4 = new Pyramidal[PinL4];                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           L5 = new Pyramidal[PinL5];                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           L6 = new Pyramidal[PinL6];                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           Thalmus = new Pyramidal[PinTh];               ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct {                                           ║class Column:                                            ║  Column = RECORD                                        ║                                                         ║  public static class Column{                            ║type Column struct {                                                                                    
         Minicolumn MC[MCinC];                             ║  def __init():                                          ║                 MC: ARRAY MCinC OF Minicolumn           ║                                                         ║    Minicolumn[] MC;                                     ║       MC [MCinC]Minicolumn                                                       
     } Column;                                             ║    self.MC = [Minicolumn() for i in range(MCinC)]       ║               END;                                      ║                                                         ║                                                         ║     }                                                      
                                                           ║                                                         ║                                                         ║                                                         ║    public Column(){                                     ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           MC = new Minicolumn[MCinC];                   ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                        
typedef struct {                                           ║class Patch:                                             ║  Patch = RECORD                                         ║INTEGER(4), DIMENSION(:), ALLOCATABLE :: P               ║  public static class Patch{                             ║type Patch  struct {                                                                                    
             Column  C[ CinP];                             ║  def __init():                                          ║                  C: ARRAY CinP OF Column                ║INTEGER(4), DIMENSION(:), ALLOCATABLE :: S               ║    Column[] C;                                          ║       C [CinP]Column                                                           
     } Patch;                                              ║    self.C  = [    Column() for i in range( CinP)]       ║               END;                                      ║                                                         ║                                                         ║     }                                                      
                                                           ║                                                         ║  PPatch = POINTER TO Patch;                             ║                                                         ║    public Patch(){                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           C = new Column[CinP];                         ║                                                              
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                              
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║call begin()                                             ║                                                         ║                                                         
                                                           ║                                                         ║VAR                                                      ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  P: PPatch;                                             ║CONTAINS                                                 ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE NL; BEGIN Out.Ln END NL;                       ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE OI(I,X:INTEGER); BEGIN Out.Int(I,X) END OI;    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE OS(S:ARRAY OF CHAR);BEGIN Out.String(S) END OS;║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE SAP(VAR t: ARRAY OF CHAR;s: ARRAY OF CHAR);    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║VAR x,y:INTEGER; BEGIN x:=0; WHILE t[x]#0X DO INC(x) END;║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  y:=0;WHILE s[y]#0X DO t[x]:=s[y];INC(x);INC(y) END;    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  t[x]:=0X;                                              ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║END SAP;                                                 ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
Patch * initialize( int argc, char *argv[]){               ║def initialize():                                        ║PROCEDURE initialize(VAR p: PPatch);                     ║  SUBROUTINE initialize( )                               ║  public static Patch initialize(String[] args){         ║func initialize() *Patch {                                    
  FILE * fpex; FILE * fdnd; int dp; int np; Patch *P;      ║                                                         ║CONST td ="-9-128-4-32-32-32-32-48-48-48-40-0-0-0.dnd";  ║    implicit none                                        ║    int dp;                                              ║                                                      
  char  hdr[4096]; char dndfn[1024]; char pexfn[1024];     ║  P = None                                               ║      tp ="-9-128-4-32-32-32-32-0-0-0.pex";              ║    character(256) :: arg                                ║    int np;                                              ║  P:=new(Patch)                                                        
  if ( argc > 1 ) {                                        ║  if len(sys.argv) > 1:                                  ║VAR   i,res,dp,np:INTEGER; fdnd,fpex: Files.File;        ║    integer :: icount                                    ║    Patch P;                                             ║                                                       
    printf("  initializing %s\n",argv[1]);                 ║    print(f"  initializing {sys.argv[1]}")               ║      arg,pexfn,dndfn:ARRAY 256 OF CHAR;                 ║    integer :: dp                                        ║                                                         ║  if len(os.Args) > 1 {
    sprintf(dndfn,"b-%s-%s",argv[1],                       ║    t="9-128-4-32-32-32-32-48-48-48-40-0-0-0.dnd"        ║BEGIN                                                    ║    integer :: np                                        ║    P = null;                                            ║    fmt.Println("  initializing", os.Args[1])            
      "9-128-4-32-32-32-32-48-48-48-40-0-0-0.dnd");        ║    dndfn=f"b-{sys.argv[1]}-{t}"                         ║  IF Args.count > 0 THEN Args.Get(0, arg, res);          ║    integer :: astat                                     ║    if (args.length > 0) {                               ║    dp:= SPD+PPP+BPP+APP                                      
    sprintf(pexfn,"b-%s-%s",argv[1],                       ║    t="9-128-4-32-32-32-32-0-0-0.pex"                    ║    IF res = 0 THEN                                      ║    icount = iargc()                                     ║      System.out.println("  initializing "+args[0]);     ║    np:=(PinL2+PinL4+PinL5+PinL6+PinTh)*MCinC*CinP                                                                                      
      "9-128-4-32-32-32-32-0-0-0.pex");                    ║    pexfn=f"b-{sys.argv[1]}-{t}"                         ║      OS("  initializing "); OS(arg); NL;                ║    if ( icount.gt.0 ) then                              ║                                                         ║    fmt.Println("   dendrites:   ", dp*np)                                                                       
    fpex = fopen(pexfn,"r");                               ║    try:                                                 ║      pexfn:="b-";SAP(pexfn,arg);SAP(pexfn,tp);          ║      call getarg(1, arg)                                ║      dp= SPD+PPP+BPP+APP;                               ║    fmt.Println("   p cells  :     ", np)
    if(fpex){                                              ║      with open(pexfn,'r') as fpex:                      ║      dndfn:="b-";SAP(dndfn,arg);SAP(dndfn,td);          ║                                                         ║      np=(PinL2+PinL4+PinL5+PinL6+PinTh)*MCinC*CinP;     ║    fmt.Println("   miniclmns:       ", CinP*MCinC)        
      fdnd = fopen(dndfn,"r");                             ║        try:                                             ║      fpex:=Files.Old(pexfn);                            ║      print *,' initializing ', TRIM(arg)                ║      System.out.println("   dendrites:    "+dp*np);     ║  }else{                                                 
      if(fdnd){                                            ║          with open(dndfn,"r") as fdnd:                  ║      IF fpex # NIL  THEN                                ║      dp= SPD+PPP+BPP+APP                                ║      System.out.println("   p cells  :      "+np);      ║    fmt.Println("  parameter?")                          
        fgets(hdr,4096,(FILE *)fpex);                      ║            dp=SPD+PPP+BPP+APP                           ║        fdnd:=Files.Old(dndfn);                          ║      np=(PinL2+PinL4+PinL5+PinL6+PinTh)*MCinC*CinP      ║  System.out.println("   miniclmns:        "+CinP*MCinC);║  }                                                      
        dp= SPD+PPP+BPP+APP;                               ║            np= PinL2+PinL4+PinL5+PinL6+PinTh            ║        IF fdnd # NIL  THEN                              ║      print *,'  dendrites:', dp*np                      ║      P = new Patch();                                   ║  return P                                               
        np=(PinL2+PinL4+PinL5+PinL6+PinTh)*MCinC*CinP;     ║            np= np*MCinC*CinP;                           ║          dp:=SPD+PPP+BPP+APP;                           ║      print *,'  p cells  :', np                         ║    }else{                                               ║}                                                        
         printf("   dendrites:    %d\n",dp*np);            ║            print(f"   dendrites:    {dp*np}")           ║          np:=(PinL2+PinL4+PinL5+PinL6+PinTh)*MCinC*CinP;║      print *,'  miniclmns:', CinP*MCinC                 ║      System.out.println("  parameter?");                ║                                                         
         printf("   p cells  :      %d\n",np);             ║            print(f"   p cells  :      {np}")            ║          OS("   dendrites:"); OI(dp*np,12); NL;         ║      ALLOCATE ( P(np*dp), STAT = astat)                 ║    }                                                    ║                                                         
         printf("   miniclmns:        %d\n",CinP*MCinC);   ║            print(f"   miniclmns:        {CinP*MCinC}")  ║          OS("   p cells  :"); OI(np,12); NL;            ║      IF (astat /= 0) STOP "*** OOM ***"                 ║    return P;                                            ║                                                         
         P = (Patch *)malloc(sizeof(Patch));               ║            P = Patch()                                  ║          OS("   miniclmns:"); OI(CinP*MCinC,12); NL;    ║      ALLOCATE ( S(np),    STAT = astat)                 ║  }                                                      ║                                                         
                                                           ║                                                         ║          NEW(p)                                         ║      IF (astat /= 0) STOP "*** OOM ***"                 ║                                                         ║                                                         
      }else{                                               ║                                                         ║        ELSE                                             ║                                                         ║                                                         ║                                                         
        printf("  file %s?\n",dndfn);                      ║        except:                                          ║          OS("  file "); OS(dndfn); OS("?"); NL;         ║    else                                                 ║                                                         ║                                                         
      }                                                    ║          print(f"  file {dndfn}?")                      ║        END                                              ║      print *,' parameter?'                              ║                                                         ║                                                         
    }else{                                                 ║    except:                                              ║      ELSE                                               ║    endif                                                ║                                                         ║                                                         
      printf("  file %s?\n",pexfn);                        ║      print(f"  file {pexfn}?")                          ║        OS("  file "); OS(pexfn); OS("?"); NL;           ║    RETURN                                               ║                                                         ║                                                         
    }                                                      ║  else:                                                  ║      END                                                ║  END SUBROUTINE                                         ║                                                         ║                                                         
  }else{                                                   ║    print("  parameter?")                                ║    ELSE                                                 ║                                                         ║                                                         ║                                                         
    printf("  parameter?\n");                              ║                                                         ║      OS("  config?"); NL;                               ║                                                         ║                                                         ║                                                         
  }                                                        ║                                                         ║    END                                                  ║                                                         ║                                                         ║                                                         
  return(P);                                               ║  return P                                               ║  ELSE                                                   ║                                                         ║                                                         ║                                                         
}                                                          ║                                                         ║      OS("  parameter?"); NL;                            ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  END;                                                   ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║END initialize;                                          ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
void iterate(Patch *P){                                    ║def iterate(P):                                          ║PROCEDURE iterate(VAR p: PPatch);                        ║  SUBROUTINE iterate( )                                  ║  public static void iterate(Patch P){                   ║func iterate(P *Patch){                                       
  printf("  iterating\n");                                 ║  print("  iterating")                                   ║                                                         ║    implicit none                                        ║    System.out.println("  iterating");                   ║                                                    
}                                                          ║                                                         ║BEGIN                                                    ║    print *,' iterating'                                 ║  }                                                      ║  fmt.Println("  iterating")                     
                                                           ║                                                         ║  Out.String("  iterating"); Out.Ln;                     ║    RETURN                                               ║                                                         ║                                                         
                                                           ║                                                         ║END iterate;                                             ║  END SUBROUTINE                                         ║                                                         ║}                                             
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
void summarize(Patch *P){                                  ║def summarize(P):                                        ║PROCEDURE summarize(VAR p: PPatch);                      ║  SUBROUTINE summarize( )                                ║  public static void  summarize(Patch P){                ║func summarize(P *Patch){                                     
  printf("  summarizing\n");                               ║  print("  summarizing")                                 ║BEGIN                                                    ║    implicit none                                        ║    System.out.println("  summarizing");                 ║                                                    
}                                                          ║                                                         ║  Out.String("  summarizing"); Out.Ln;                   ║    print *,' summarizing'                               ║                                                         ║  fmt.Println("  summarizing")                   
                                                           ║                                                         ║                                                         ║    RETURN                                               ║  }                                                      ║                                                         
                                                           ║                                                         ║END summarize;                                           ║  END SUBROUTINE                                         ║                                                         ║}                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
int main(int argc, char *argv[]){                          ║if __name__ == "__main__":                               ║BEGIN                                                    ║  SUBROUTINE begin( )                                    ║  public static void main (String[] args)    {           ║func main(){                                                    
  Patch *P;                                                ║  print(" Brainiac")                                     ║  Out.String(" Brainiac"); Out.Ln;                       ║    print *,'Brainiac'                                   ║    Patch P;                                             ║  fmt.Println(" Brainiac")                       
                                                           ║  P = initialize()                                       ║                                                         ║    call initialize()                                    ║    System.out.println(" Brainiac");                     ║                                                         
  printf(" Brainiac\n");                                   ║  iterate(P)                                             ║  initialize(P);                                         ║    call iterate()                                       ║    P=initialize(args);                                  ║  P:=initialize()                                            
  P = initialize(argc,argv);                               ║  summarize(P)                                           ║  iterate(P);                                            ║    call summarize()                                     ║    iterate(P);                                          ║  iterate(P)                                           
  iterate(P);                                              ║                                                         ║  summarize(P);                                          ║                                                         ║    summarize(P);                                        ║  summarize(P)                                             
  summarize(P);                                            ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
  return(0);                                               ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
}                                                          ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║  END SUBROUTINE                                         ║                                                         ║                                                         
                                                           ║                                                         ║END Brainiac.                                            ║END PROGRAM Brainiac                                     ║}                                                        ║}                                            
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
