/* brainiac.c */                                           ║#  Brainiac.py                                           ║(* Brainiac.Mod *)                                       ║!brainiac.f90                                            ║// Brainiac.java                                         ║// brainiac.go                                                 
#include <stdint.h>                                        ║                                                         ║MODULE Brainiac;                                         ║PROGRAM Brainiac                                         ║import java.io.*;                                        ║package main                                             
#include <stdbool.h>                                       ║import sys                                               ║                                                         ║implicit none                                            ║import java.time.*;                                      ║import "fmt"                                                         
#include <stdio.h>                                         ║import numpy as np                                       ║IMPORT Args := extArgs, Err := extErr, Out, Files, Input;║                                                         ║public class Brainiac {                                  ║import "os"                                             
#include <stdlib.h>                                        ║from datetime import datetime                            ║                                                         ║                                                         ║                                                         ║import "bufio"                                                         
#include <sys/time.h>                                      ║                                                         ║CONST                                                    ║                                                         ║                                                         ║import "time"                                              
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║const (                                                  
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define PYRAMIDAL 0                                        ║PYRAMIDAL = 0                                            ║  PYRAMIDAL = 0;                                         ║ integer, parameter :: PYRAMIDAL = 0                     ║  final static int PYRAMIDAL = 0;                        ║  PYRAMIDAL = 0                                            
#define INHIBITOR 1                                        ║INHIBITOR = 1                                            ║  INHIBITOR = 1;                                         ║ integer, parameter :: INHIBITOR = 1                     ║  final static int INHIBITOR = 1;                        ║  INHIBITOR = 1                                            
#define SPD   40  // Synapses per Dendrite                 ║SPD = 40   # Synapses per Dendrite                       ║  SPD = 40; (* Synapses per Dendrite *)                  ║ integer, parameter :: SPD = 40                          ║  final static int SPD = 40; // Synapses per Dendrite    ║  SPD = 40  // Synapses per Dendrite                       
#define DSZ   40 * 4 // 32 bits per Synapse                ║DSZ = 40 * 4 # 32 bits per Synapse                       ║  DSZ = 40 * 4; (* 32 bits per Synapse *)                ║ integer, parameter :: DSZ = 40 * 4                      ║  final static int DSZ = 40 * 4; // 32 bits per Synapse  ║  DSZ = 40 * 4 // 32 bits per Synapse                      
#define PPP   32  // Proximal per Pyramidal                ║PPP = 32   # Proximal per Pyramidal                      ║  PPP = 32; (* Proximal per Pyramidal *)                 ║ integer, parameter :: PPP = 32                          ║  final static int PPP = 32; // Proximal per Pyramidal   ║  PPP = 32  // Proximal per Pyramidal                      
#define BPP   32  // Basal per Pyramidal                   ║BPP = 32   # Basal per Pyramidal                         ║  BPP = 32; (* Basal per Pyramidal *)                    ║ integer, parameter :: BPP = 32                          ║  final static int BPP = 32; // Basal per Pyramidal      ║  BPP = 32  // Basal per Pyramidal                         
#define APP   32  // Apical per Pyramidal                  ║APP = 32   # Apical per Pyramidal                        ║  APP = 32; (* Apical per Pyramidal *)                   ║ integer, parameter :: APP = 32                          ║  final static int APP = 32; // Apical per Pyramidal     ║  APP = 32  // Apical per Pyramidal                        
#define DPN   32 + 32 + 32                                 ║DPN = 32 + 32 + 32                                       ║  DPN = 32 + 32 + 32;                                    ║ integer, parameter :: DPN = 32 + 32 + 32                ║  final static int DPN = 32 + 32 + 32;                   ║  DPN = 32 + 32 + 32                                       
#define PinL2   28  // Pyramidal in L2                     ║PinL2 = 28   # Pyramidal in L2                           ║  PinL2 = 28; (* Pyramidal in L2 *)                      ║ integer, parameter :: PinL2 = 28                        ║  final static int PinL2 = 28; // Pyramidal in L2        ║  PinL2 = 28  // Pyramidal in L2                           
#define Acc2    28                                         ║Acc2  = 28                                               ║  Acc2  = 28;                                            ║ integer, parameter :: Acc2  = 28                        ║  final static int Acc2  = 28;                           ║  Acc2  = 28                                               
#define PinL4   28  // Pyramidal in L4                     ║PinL4 = 28   # Pyramidal in L4                           ║  PinL4 = 28; (* Pyramidal in L4 *)                      ║ integer, parameter :: PinL4 = 28                        ║  final static int PinL4 = 28; // Pyramidal in L4        ║  PinL4 = 28  // Pyramidal in L4                           
#define Acc4    56                                         ║Acc4  = 28 + PinL2                                       ║  Acc4  = 28 + PinL2;                                    ║ integer, parameter :: Acc4  = 28 + PinL2                ║  final static int Acc4  = 28 + PinL2;                   ║  Acc4  = 28 + PinL2                                       
#define PinL5   28  // Pyramidal in L5                     ║PinL5 = 28   # Pyramidal in L5                           ║  PinL5 = 28; (* Pyramidal in L5 *)                      ║ integer, parameter :: PinL5 = 28                        ║  final static int PinL5 = 28; // Pyramidal in L5        ║  PinL5 = 28  // Pyramidal in L5                           
#define Acc5    84                                         ║Acc5  = 28 + Acc4                                        ║  Acc5  = 28 + Acc4;                                     ║ integer, parameter :: Acc5  = 28 + Acc4                 ║  final static int Acc5  = 28 + Acc4;                    ║  Acc5  = 28 + Acc4                                        
#define PinL6   28  // Pyramidal in L6                     ║PinL6 = 28   # Pyramidal in L6                           ║  PinL6 = 28; (* Pyramidal in L6 *)                      ║ integer, parameter :: PinL6 = 28                        ║  final static int PinL6 = 28; // Pyramidal in L6        ║  PinL6 = 28  // Pyramidal in L6                           
#define Acc6    112                                        ║Acc6  = 28 + Acc5                                        ║  Acc6  = 28 + Acc5;                                     ║ integer, parameter :: Acc6  = 28 + Acc5                 ║  final static int Acc6  = 28 + Acc5;                    ║  Acc6  = 28 + Acc5                                        
#define PinTh   4   // Pyramidal in Thalmus                ║PinTh = 4    # Pyramidal in Thalmus                      ║  PinTh = 4;  (* Pyramidal in Thalmus *)                 ║ integer, parameter :: PinTh = 4                         ║  final static int PinTh = 4;  // Pyramidal in Thalmus   ║  PinTh = 4   // Pyramidal in Thalmus                      
#define AccTh   116  // Consider the Hippocampus           ║AccTh = 4  + Acc6                                        ║  AccTh = 4  + Acc6;                                     ║ integer, parameter :: AccTh = 4  + Acc6                 ║  final static int AccTh = 4  + Acc6;                    ║  AccTh = 4  + Acc6                                        
#define MCinC   96 // 128 // Minicolumns in a Column       ║MCinC = 96   # Minicolumns in a Column                   ║  MCinC = 96 ;(* Minicolumns in a Column *)              ║ integer, parameter :: MCinC = 96                        ║  final static int MCinC = 96 ; // Minicolumns per Column║  MCinC = 96  // Minicolumns in a Column                   
#define CinP    9   // Columns in a Patch                  ║CinP = 9    # Columns in a Patch                         ║  CinP = 9 ; (* Columns in a Patch *)                    ║ integer, parameter :: CinP = 9                          ║  final static int CinP = 9  ; // Columns in a Patch     ║  CinP = 9    // Columns in a Patch                    
#define NP      100224 // 152064                           ║NP = 100224                                              ║  NP = 100224;                                           ║ integer, parameter :: NP = 100224                       ║  final static int NP = 100224;                          ║  NP = 100224                                              
#define brainN  10000000000 // neurons in the cortex       ║                                                         ║                                                         ║                                                         ║                                                         ║)                                                        
#define brainP  100000 // patches in the cortex            ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define flyN    200000 // 50% Central vs Optic             ║                                                         ║TYPE                                                     ║                                                         ║                                                         ║                                                         
#define flyS    800 // synapses per neuron                 ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define brainS  30000 // synapses per pyramidal neuron     ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define DforSp  135 // 20 of 135 act clustered fr spike?   ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define NtoN    5 // avg syn contacts axon2axon            ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
#define CforSp  20 // 20 connections per spike?            ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef int32_t Potential;                                 ║                                                         ║  Potential = INTEGER;                                   ║                                                         ║                                                         ║type Potential struct { excited bool }                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef int32_t Synapse;                                   ║                                                         ║  Synapse = INTEGER;                                     ║                                                         ║                                                         ║type Synapse int32                                       
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct { Synapse s[SPD];} Dendrite;                ║                                                         ║  Dendrite = RECORD                                      ║                                                         ║  public static class Dendrite{                          ║type Dendrite   struct {                                                                                    
                                                           ║                                                         ║             S: ARRAY SPD OF Synapse                     ║                                                         ║    int[]   S;                                           ║        S [SPD]Synapse                                   
                                                           ║                                                         ║            END;                                         ║                                                         ║                                                         ║     }                                                   
                                                           ║                                                         ║                                                         ║                                                         ║    public Dendrite(InputStream fdnd){                   ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║           S = new int[SPD];                             ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      byte[] b = new byte[SPD*4];                        ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      try {                                              ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        fdnd.read(b);                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        for(int i=0;i<SPD;i++){                          ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║          S[i]=b[i*4]+(b[i*4+1]<<8)+                     ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║              (b[i*4+2]<<16)+(b[i*4+3]<<24);             ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        }                                                ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      } catch (IOException ex){                          ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        ex.printStackTrace();                            ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      }                                                  ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct {                                           ║class Neuron:                                            ║  Neuron    = RECORD                                     ║                                                         ║  public static class   Neuron{                          ║type Neuron    struct {                                                                                     
       uint16_t Kind;                                      ║  def __init__(self,p,fpex,fdnd):                        ║             State: INTEGER;                             ║                                                         ║    int State;                                           ║       State int16                                                                                          
                                                           ║    data = fpex.read(2)                                  ║             Kind: INTEGER;                              ║                                                         ║    int Kind;                                            ║       Kind  int16                                                                                          
       uint16_t State;                                     ║    self.Kind  =   int.from_bytes(data, "little")        ║             De:    ARRAY DPN OF Dendrite                ║                                                         ║    Dendrite[] De;                                       ║       De    [DPN]Dendrite                                                                                  
                                                           ║    data = fpex.read(2)                                  ║                                                         ║                                                         ║                                                         ║                                                                                                            
       Dendrite De[DPN];                                   ║    self.State =   int.from_bytes(data, "little")        ║           END;                                          ║                                                         ║                                                         ║     }                                                                                                      
                                                           ║                                                         ║                                                         ║                                                         ║    public Neuron(InputStream fpex, InputStream fdnd){   ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      byte[] b      = new byte[4];                       ║                                                         
     } Neuron;                                             ║    data = fdnd.read(4*SPD*DPN)                          ║                                                         ║                                                         ║      try                  {                             ║                                                         
                                                           ║    self.De=np.frombuffer(data, dtype=np.int32)          ║                                                         ║                                                         ║        fpex.read(b);                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        De    = new Dendrite[DPN];                       ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║        State = b[0]+(b[1]<<8);                          ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        Kind = b[2]+(b[3]<<16);                          ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        for(int i=0;i<DPN;i++){                          ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║          De[i] = new Dendrite(fdnd);                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        }                                                ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      } catch (IOException ex) {                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║        ex.printStackTrace();                            ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      }                                                  ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct {                                           ║class Minicolumn:                                        ║  Minicolumn = RECORD                                    ║                                                         ║  public static class Minicolumn{                        ║type Minicolumn struct {                                                                                    
         Neuron     N[AccTh];                              ║ def __init__(self,mc,fpex,fdnd):                        ║                  N: ARRAY AccTh OF Neuron               ║                                                         ║    Neuron[] N;                                          ║        N [AccTh]Neuron                                                          
                                                           ║  self.N=[   Neuron(p,fpex,fdnd) for p in range(AccTh)]  ║                  END;                                   ║                                                         ║                                                         ║                                                                                 
                                                           ║                                                         ║                                                         ║                                                         ║   public Minicolumn(InputStream fpex, InputStream fdnd){║                                                                                  
                                                           ║                                                         ║                                                         ║                                                         ║            N = new    Neuron[AccTh];                    ║                                                                                   
                                                           ║                                                         ║                                                         ║                                                         ║      for(int i=0;i<AccTh;i++){                          ║                                                     
     } Minicolumn;                                         ║                                                         ║                                                         ║                                                         ║        N[i] = new Neuron(fpex,fdnd);                    ║     }                                                   
                                                           ║                                                         ║                                                         ║                                                         ║      }                                                  ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
typedef struct {                                           ║class Column:                                            ║  Column = RECORD                                        ║                                                         ║  public static class Column{                            ║type Column struct {                                                                                    
         Minicolumn MC[MCinC];                             ║ def __init__(self,c,fpex,fdnd):                         ║                 MC: ARRAY MCinC OF Minicolumn           ║                                                         ║    Minicolumn[] MC;                                     ║       MC [MCinC]Minicolumn                                                       
     } Column;                                             ║  self.MC=[Minicolumn(m,fpex,fdnd) for m in range(MCinC)]║               END;                                      ║                                                         ║                                                         ║     }                                                      
                                                           ║                                                         ║                                                         ║                                                         ║    public Column(InputStream fpex, InputStream fdnd){   ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║       MC = new Minicolumn[MCinC];                       ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║       for(int i=0;i<MCinC;i++){                         ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║         MC[i] = new Minicolumn(fpex,fdnd);              ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║       }                                                 ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                        
typedef struct {                                           ║class Patch:                                             ║  Patch = RECORD                                         ║INTEGER(4), DIMENSION(:), ALLOCATABLE :: P               ║  public static class Patch{                             ║type Patch  struct {                                                                                    
             Column  C[ CinP];                             ║  def __init__(self,fpex,fdnd):                          ║                  C: ARRAY CinP OF Column                ║INTEGER(4), DIMENSION(:), ALLOCATABLE :: S               ║    Column[] C;                                          ║       C [CinP]Column                                                           
     } Patch;                                              ║    self.C = [Column(c,fpex,fdnd) for c in range(CinP)]  ║               END;                                      ║                                                         ║                                                         ║     }                                                      
                                                           ║                                                         ║  PPatch = POINTER TO Patch;                             ║                                                         ║    public Patch(InputStream fpex, InputStream fdnd){    ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║      C = new Column[CinP];                              ║                                                              
                                                           ║                                                         ║                                                         ║                                                         ║      for(int i=0;i<CinP;i++){                           ║                              
                                                           ║                                                         ║                                                         ║                                                         ║        C[i] = new Column(fpex,fdnd);                    ║                                                        
                                                           ║                                                         ║                                                         ║                                                         ║      }                                                  ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║call begin()                                             ║  }                                                      ║                                                         
                                                           ║                                                         ║VAR                                                      ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  P: PPatch;                                             ║CONTAINS                                                 ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE NL; BEGIN Out.Ln END NL;                       ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE OI(I,X:INTEGER); BEGIN Out.Int(I,X) END OI;    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE OS(S:ARRAY OF CHAR);BEGIN Out.String(S) END OS;║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║PROCEDURE SAP(VAR t: ARRAY OF CHAR;s: ARRAY OF CHAR);    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║VAR x,y:INTEGER; BEGIN x:=0; WHILE t[x]#0X DO INC(x) END;║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  y:=0;WHILE s[y]#0X DO t[x]:=s[y];INC(x);INC(y) END;    ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║  t[x]:=0X;                                              ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║END SAP;                                                 ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
  void la2sa( int a,int*c,int*mc,int*ni,int*lv,int*lvo ){  ║def la2sa( a ):                                          ║PROCEDURE la2sa(a:INTEGER; VAR c,mc,ni,lv,lvo: INTEGER); ║  SUBROUTINE la2sa(a,c,mc,ni,lv,lvo)                     ║  public static int[] la2sa( int a){                     ║func la2sa( a int )(c,mc,ni,lv,lvo int){                                                                                 
    *ni = a % AccTh;                                       ║  ni=a % AccTh                                           ║                                                         ║    implicit none                                        ║                                                         ║    ni =a % AccTh                                                                                                  
    int mco = a  / AccTh; *mc = mco % MCinC;               ║  mco = a // AccTh;       mc = mco % MCinC               ║VAR mco,co: INTEGER;                                     ║    integer, INTENT(IN) :: a                             ║    int r[] = new int[5]; //c,mc,ni,lv,lvo               ║   mco:= a / AccTh;       mc = mco % MCinC                                                                       
    int co = a / (AccTh*MCinC); *c= co % CinP;             ║  co = a // (AccTh*MCinC); c= co % CinP                  ║BEGIN  ni := a MOD AccTh; mco := a DIV AccTh;            ║    integer, INTENT(INOUT) :: c,mc,ni,lv,lvo             ║                             int mci = a  % AccTh;       ║   co:= a / (AccTh*MCinC); c= co % CinP                                                                          
    if      (*ni<PinL2) {*lv=0;  *lvo=*ni;                 ║  if        ni<PinL2:   lv=0;   lvo= ni                  ║ mc:=mco MOD MCinC;co:=a DIV(AccTh*MCinC);c:=co MOD CinP;║    integer :: np,mci,mco,co                             ║    int mco = a  / AccTh;r[1] = mco % MCinC;             ║   if        ni<PinL2{   lv=0;   lvo= ni                                                                          
    }else if(*ni<Acc4)  {*lv=1;  *lvo=*ni-PinL2;           ║  elif      ni<Acc4:    lv=1;   lvo= ni-PinL2            ║  IF     ni<PinL2 THEN lv:=0;  lvo:= ni                  ║                                                         ║    int co = a / (AccTh*MCinC);r[0]=co % CinP;           ║   }else if  ni<Acc4{    lv=1;   lvo= ni-PinL2                                                                    
    }else if(*ni<Acc5)  {*lv=2;  *lvo=*ni-Acc4;            ║  elif      ni<Acc5:    lv=2;   lvo= ni-Acc4             ║  ELSIF  ni<Acc4  THEN lv:=1;  lvo:= ni-PinL2            ║    mci=mod(a,AccTh)                                     ║    if      (mci<PinL2) {r[3]=0;  r[4]=mci;              ║   }else if  ni<Acc5{    lv=2;   lvo= ni-Acc4                                                                     
    }else if(*ni<Acc6)  {*lv=3;  *lvo=*ni-Acc5;            ║  elif      ni<Acc6:    lv=3;   lvo= ni-Acc5             ║  ELSIF  ni<Acc5  THEN lv:=2;  lvo:= ni-Acc4             ║    mco=a / AccTh                                        ║    }else if(mci<Acc4)  {r[3]=1;  r[4]=mci-PinL2;        ║   }else if  ni<Acc6{    lv=3;   lvo= ni-Acc5                                                                     
    }else if(*ni<AccTh) {*lv=4;  *lvo=*ni-Acc6;            ║  elif      ni<AccTh:   lv=4;   lvo= ni-Acc6             ║  ELSIF  ni<Acc6  THEN lv:=3;  lvo:= ni-Acc5             ║    mc =mod(mco,MCinC)                                   ║    }else if(mci<Acc5)  {r[3]=2;  r[4]=mci-Acc4;         ║   }else if  ni<AccTh{   lv=4;   lvo= ni-Acc6                                                                     
    }else               {*lv=-1; *lvo=-1;                  ║  else:                 lv=-1;  lvo=-1                   ║  ELSIF  ni<AccTh THEN lv:=4;  lvo:= ni-Acc6             ║    co =a /(AccTh*MCinC)                                 ║    }else if(mci<Acc6)  {r[3]=3;  r[4]=mci-Acc5;         ║   }else{                lv=-1;  lvo=-1  }                                                                        
    }                                                      ║  return c, mc, ni, lv, lvo                              ║  ELSE                 lv:=-1; lvo:=-1                   ║    c =mod(co,CinP)                                      ║    }else if(mci<AccTh) {r[3]=4;  r[4]=mci-Acc6;         ║   return c, mc, ni, lv, lvo                                                                                          
  }                                                        ║                                                         ║  END                                                    ║    IF      (mci<PinL2) THEN;lv =0;  lvo =mci            ║    }else               {r[3]=-1; r[4]=-1;               ║}                                                        
                                                           ║                                                         ║END la2sa;                                               ║    ELSE IF (mci<Acc4)  THEN;lv =1;  lvo =mci-PinL2      ║    }                                                    ║                                                         
                                                           ║                                                         ║                                                         ║    ELSE IF (mci<Acc5)  THEN;lv =2;  lvo =mci-Acc4       ║    r[2]=mci;                                            ║                                                         
                                                           ║                                                         ║                                                         ║    ELSE IF (mci<Acc6)  THEN;lv =3;  lvo =mci-Acc5       ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║    ELSE IF (mci<AccTh) THEN;lv =4;  lvo =mci-Acc6       ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║    ELSE                    ;lv =-1; lvo =-1             ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║    END IF                                               ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║    return r;                                            ║                                                         
                                                           ║                                                         ║                                                         ║  END SUBROUTINE                                         ║  }                                                      ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
Patch * initialize( int argc, char *argv[]){               ║def initialize():                                        ║PROCEDURE initialize(VAR p: PPatch);                     ║  SUBROUTINE initialize( )                               ║  public static Patch initialize(String[] args){         ║func initialize() *Patch {                                    
  FILE * fpex; FILE * fdnd; int dp,   i,j ; Patch *P;      ║  P = None                                               ║CONST td ="-9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd";   ║    implicit none                                        ║    int dp,c,mc,ni,lv,lvo; int[] a;                      ║                                                      
  char  hdr[4096]; char dndfn[1024]; char pexfn[1024];     ║  if len(sys.argv) > 1:                                  ║      tp ="-9-96-4-28-28-28-28-0-0-0.pex";               ║    character(256) :: arg, td, tp                        ║                                                         ║  P:=new(Patch)                                                        
  struct timeval tvs,tve;float elapsed;                    ║    tvs=datetime.now()                                   ║VAR i,j,k,res,dp,c,mc,ni,lv,lvo,tvs,tve:INTEGER;         ║    integer :: icount, dp,    astat,i,c,mc,lv,lvo        ║    Patch P;                                             ║  tvs:=time.Now().UnixMilli()                           
  if ( argc > 1 ) {                                        ║    print(f"  initializing {sys.argv[1]}")               ║      fdnd,fpex:Files.File; b1,b2,b3,b4:BYTE;            ║    integer(4) :: x                                      ║    Instant tvs = Instant.now();                         ║  if len(os.Args) > 1 {
    printf("  initializing %s\n",argv[1]);                 ║    t="9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd"         ║      arg,pexfn,dndfn:ARRAY 256 OF CHAR;                 ║    real :: tvs,tve                                      ║    P = null;                                            ║    fmt.Println("  initializing", os.Args[1])            
    gettimeofday(&tvs,NULL);                               ║    dndfn=f"b-{sys.argv[1]}-{t}"                         ║      n: POINTER TO Neuron;rdnd,rpex:Files.Rider;        ║    icount = iargc()                                     ║    if (args.length > 0) {                               ║    pexfn:="b-"+os.Args[1]+
    sprintf(dndfn,"b-%s-%s",argv[1],                       ║    t="9-96-4-28-28-28-28-0-0-0.pex"                     ║      dbuf: ARRAY SPD * 4 OF BYTE;                       ║    if ( icount.gt.0 ) then                              ║      System.out.println("  initializing "+args[0]);     ║         "-9-96-4-28-28-28-28-0-0-0.pex"; 
      "9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd");         ║    pexfn=f"b-{sys.argv[1]}-{t}"                         ║BEGIN                                                    ║      call getarg(1, arg)                                ║      String pexfn="b-"+args[0]+                         ║    dndfn:="b-"+os.Args[1]+
    sprintf(pexfn,"b-%s-%s",argv[1],                       ║    try:                                                 ║  IF Args.count > 0 THEN Args.Get(0, arg, res);          ║      print *,' initializing ', TRIM(arg)                ║         "-9-96-4-28-28-28-28-0-0-0.pex";                ║         "-9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd";
      "9-96-4-28-28-28-28-0-0-0.pex");                     ║      with open(pexfn,'br') as fpex:                     ║    IF res = 0 THEN                                      ║      call cpu_time(tvs)                                 ║      String dndfn="b-"+args[0]+                         ║    fpex, err1 := os.Open(pexfn)
    fpex = fopen(pexfn,"r");                               ║        try:                                             ║      OS("  initializing "); OS(arg); NL;                ║      td="-9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd"     ║         "-9-96-4-28-28-28-28-32-32-32-40-0-0-0.dnd";    ║    if err1 == nil {
    if(fpex){                                              ║          with open(dndfn,"br") as fdnd:                 ║      tvs:=Input.Time();                                 ║      tp="-9-96-4-28-28-28-28-0-0-0.pex"                 ║      try (                                              ║      fdnd, err2 := os.Open(dndfn)
      fdnd = fopen(dndfn,"r");                             ║            dp=SPD+PPP+BPP+APP                           ║      pexfn:="b-";SAP(pexfn,arg);SAP(pexfn,tp);          ║      open (1,file="b-"//TRIM(arg)//tp, status = 'old', &║        InputStream fpex = new FileInputStream(pexfn);   ║      if err2 == nil {
      if(fdnd){                                            ║                                                         ║      dndfn:="b-";SAP(dndfn,arg);SAP(dndfn,td);          ║            form='unformatted',access='STREAM')          ║        InputStream fdnd = new FileInputStream(dndfn);   ║        dp:= SPD+PPP+BPP+APP                           
        fgets(hdr,4096,(FILE *)fpex);                      ║            print(f"   dendrites:    {dp*NP}")           ║      fpex:=Files.Old(pexfn);                            ║      open (2,file="b-"//TRIM(arg)//td, status = 'old', &║      ) {                                                ║        fmt.Println("   dendrites:   ", dp*NP)         
        dp= SPD+PPP+BPP+APP;                               ║            print(f"   p cells  :      {NP}")            ║      IF fpex # NIL  THEN                                ║                  form='unformatted',access='STREAM')    ║        dp= SPD+PPP+BPP+APP;                             ║        fmt.Println("   p cells  :     ", NP)                
         printf("   dendrites:    %d\n",dp*NP);            ║            print(f"   miniclmns:         {CinP*MCinC}") ║        fdnd:=Files.Old(dndfn);                          ║      dp= SPD+PPP+BPP+APP                                ║        System.out.println("   dendrites:    "+dp*NP);   ║        fmt.Println("   miniclmns:        ", CinP*MCinC)      
         printf("   p cells  :      %d\n",NP);             ║            print(f"   loading...")                      ║        IF fdnd # NIL  THEN                              ║      print *,'  dendrites:', dp*NP                      ║        System.out.println("   p cells  :      "+NP);    ║        fmt.Println("   loading...")                         
         printf("   miniclmns:         %d\n",CinP*MCinC);  ║            P = Patch(fpex,fdnd)                         ║          Files.Set(rpex,fpex,0);                        ║      print *,'  p cells  :', NP                         ║        System.out.println("   miniclmns:         "+     ║        d    := make([]byte, DPN*SPD*4)                                  
         printf("   loading...\n");                        ║                                                         ║          Files.Set(rdnd,fdnd,0);                        ║      print *,'  miniclmns:', CinP*MCinC                 ║                           CinP*MCinC);                  ║        drdr := bufio.NewReader(fdnd)               
         P = (Patch *)malloc(sizeof(Patch));               ║          # for i in range(NP):                          ║          dp:=SPD+PPP+BPP+APP;                           ║      print *,'  loading...'                             ║        System.out.println("   loading...");             ║        fpex.Close()                         
         int c,mc,ni,lv,lvo; uint16_t x;                   ║          #   c,mc,ni,lv,lvo=la2sa(i)                    ║          OS("   dendrites:"); OI(dp*NP,12); NL;         ║      ALLOCATE ( P(NP   ), STAT = astat)                 ║        P = new Patch(fpex,fdnd);                        ║        b,_ :=os.ReadFile(pexfn)               
         Neuron    *n; Dendrite *pd,*bd,*ad;               ║                                                         ║          OS("   p cells  :"); OI(NP,12); NL;            ║      IF (astat /= 0) STOP "*** OOM ***"                 ║        byte[] b      = new byte[NP*4];                  ║        for i:=0; i<NP;i++{                            
         for(i=0;i<NP;i++){                                ║                                                         ║          OS("   miniclmns:"); OI(CinP*MCinC,12); NL;    ║      ALLOCATE ( S(NP*DPN*SPD),    STAT = astat)         ║        fpex.read(b);                                    ║            c,mc,ni,_,_:=la2sa(i)                      
           la2sa(i,&c,&mc,&ni,&lv,&lvo);                   ║                                                         ║          OS("   loading...");                    NL;    ║      IF (astat /= 0) STOP "*** OOM ***"                 ║        for(int i=0;i<NP;i++){                           ║      //  fmt.Println("--",i,c,mc,lv,lvo)    
           n=&(P->C[c].MC[mc].N[ni]); n->State=x;          ║                                                         ║          NEW(p);                                        ║      read(1) P                                          ║    a = la2sa(i);c=a[0];mc=a[1];ni=a[2];lv=a[3];lvo=a[4];║          P.C[c].MC[mc].N[ni].Kind=                                                       
           if (fread (&x, 1, sizeof x, fpex) != sizeof x) {║                                                         ║          i:=0; WHILE (i<NP) DO                          ║!     DO i=1,NP                                          ║//System.out.println("--"+i+" "+c+" "+mc+" "+lv+" "+lvo);║              (int16)(b[i*4+0]+(b[i*4+1]<<8))
              printf("  read pex kind?\n"); exit(1);       ║                                                         ║            la2sa(i,c,mc,ni,lv,lvo);                     ║!       call la2sa(i-1,c,mc,lv,lvo)                      ║         if (P.C[c] != null){                            ║          P.C[c].MC[mc].N[ni].State=                                       
           }                                               ║                                                         ║            Files.Read(rpex,b1);Files.Read(rpex,b2);     ║!       print *,'--',i-1,c,mc,lv,lvo                     ║         P.C[c].MC[mc].N[ni].Kind=b[i*4+0]+(b[i*4+1]<<8);║              (int16)(b[i*4+2]+(b[i*4+3]<<8))                                          
           n->Kind =x;                                     ║                                                         ║            p.C[c].MC[mc].N[ni].Kind:=b1+(b2*100H);      ║!     END DO                                             ║         }                                               ║          _,_   = drdr.Read(d    )                                                     
           if (fread (&x, 1, sizeof x, fpex) != sizeof x) {║                                                         ║            Files.Read(rpex,b1);Files.Read(rpex,b2);     ║                                                         ║                                                         ║          for j:=0; j<DPN; j++{                                                                                  
              printf("  read pex state?\n"); exit(1);      ║                                                         ║            p.C[c].MC[mc].N[ni].State:=b1+(b2*100H);     ║                                                         ║        }                                                ║            for k:=0; k<SPD; k++{                                                     
           }                                               ║                                                         ║            j:=0; WHILE (j<DPN) DO                       ║      read (2) S                                         ║      } catch (IOException ex) {                         ║              P.C[c].MC[mc].N[ni].De[j].S[k]=              
           n->State=x;                                     ║                                                         ║              Files.ReadBytes(rdnd,dbuf,SPD*4);          ║      close (1)                                          ║        ex.printStackTrace();                            ║              (Synapse)(d[((j*SPD)+k)*4+0]+(d[((j*SPD)+k)*4+1]<<8)+              
           if (fread(n->De,1,DPN*DSZ,fdnd) != DPN*DSZ) {   ║                                                         ║              k:=0; WHILE (k<SPD) DO                     ║      close (2)                                          ║      }                                                  ║              (d[((j*SPD)+k)*4+2]<<16)+(d[((j*SPD)+k)*4+3]<<24))             
              printf("  read dnd?\n"); exit(1);            ║                                                         ║                res:=dbuf[k*4]+(dbuf[k*4+1]*100H);       ║      call cpu_time(tve)                                 ║      Instant tve = Instant.now();                       ║            }                                            
           }                                               ║                                                         ║                res:=res+dbuf[k*4+2]*10000H;             ║      print *,' MSEC INIT:',tve-tvs                      ║      long t = Duration.between(tvs, tve).toMillis();    ║          }                                              
                                                           ║                                                         ║                res:=res+dbuf[k*4+3]*1000000H;           ║    else                                                 ║      System.out.println("  MSEC INIT:"+ t);             ║        }                                                
//   printf("--%d,%d,%d,%d,%d,%d,%d\n",i,c,mc,ni,lv,lvo,x);║                                                         ║                p.C[c].MC[mc].N[ni].De[j].S[k]:=res;     ║      print *,' parameter?'                              ║    }else{                                               ║        fdnd.Close()                                     
         }                                                 ║                                                         ║                INC(k)                                   ║    endif                                                ║      System.out.println("  parameter?");                ║      }else{                                             
      }else{                                               ║                                                         ║              END;                                       ║    RETURN                                               ║    }                                                    ║        fmt.Println("  file",dndfn,"?",err2)             
        printf("  file %s?\n",dndfn);                      ║                                                         ║      (*      OS("--");OI(i,8);OI(c,8);OI(mc,8);         ║  END SUBROUTINE                                         ║    return P;                                            ║      }                                                  
      }                                                    ║                                                         ║              OI(lv,8);OI(lvo,8);NL;      *)             ║                                                         ║  }                                                      ║    }else{                                               
    }else{                                                 ║                                                         ║              INC(j)                                     ║                                                         ║                                                         ║      fmt.Println("  file",pexfn,"?",err1)               
      printf("  file %s?\n",pexfn);                        ║                                                         ║            END;                                         ║                                                         ║                                                         ║    }                                                    
    }                                                      ║                                                         ║            INC(i)                                       ║                                                         ║                                                         ║    fmt.Println("  MSEC INIT:",time.Now().UnixMilli()-tvs)                       
    gettimeofday(&tve,NULL);                               ║                                                         ║          END                                            ║                                                         ║                                                         ║  }else{                                                                                             
    elapsed = (tve.tv_sec-tvs.tv_sec)*1000.0f +            ║          #   print(f"--{i} {c} {mc} {ni} {lv} {lvo}")   ║        ELSE  OS("  file "); OS(dndfn); OS("?"); NL;     ║                                                         ║                                                         ║    fmt.Println("  parameter?")                          
              (tve.tv_usec-tvs.tv_usec)/1000.0f;           ║                                                         ║        END                                              ║                                                         ║                                                         ║  }                                                      
    printf("  MSEC INIT: %f\n",elapsed);                   ║        except Exception as e: print(e)                  ║      ELSE  OS("  file "); OS(pexfn); OS("?"); NL;       ║                                                         ║                                                         ║  return P                                               
                                                           ║    except Exception as e: print(e)                      ║      END;                                               ║                                                         ║                                                         ║}                                                        
                                                           ║    tve=datetime.now()                                   ║      tve:=Input.Time();                                 ║                                                         ║                                                         ║                                                         
                                                           ║    el      = (tve.second - tvs.second) * 1000           ║      OS("  MSEC INIT:" ); OI(tve-tvs,12); NL;           ║                                                         ║                                                         ║                                                         
                                                           ║    el = el +((tve.microsecond - tvs.microsecond) / 1000)║    ELSE  OS("  config?"); NL;                           ║                                                         ║                                                         ║                                                         
                                                           ║    print(f"  MSEC INIT: { el                 }")        ║    END                                                  ║                                                         ║                                                         ║                                                         
  }else{                                                   ║  else:                                                  ║  ELSE  OS("  parameter?"); NL;                          ║                                                         ║                                                         ║                                                         
    printf("  parameter?\n");                              ║    print("  parameter?")                                ║  END                                                    ║                                                         ║                                                         ║                                                         
  }                                                        ║                                                         ║END initialize;                                          ║                                                         ║                                                         ║                                                         
  return(P);                                               ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
}                                                          ║  return P                                               ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
void iterate(Patch *P){                                    ║def iterate(P):                                          ║PROCEDURE iterate(VAR p: PPatch);                        ║  SUBROUTINE iterate( )                                  ║  public static void iterate(Patch P){                   ║func iterate(P *Patch){                                       
  printf("  iterating\n");                                 ║  print("  iterating")                                   ║                                                         ║    implicit none                                        ║    System.out.println("  iterating");                   ║                                                    
}                                                          ║                                                         ║BEGIN                                                    ║    print *,' iterating'                                 ║  }                                                      ║  fmt.Println("  iterating")                     
                                                           ║                                                         ║  Out.String("  iterating"); Out.Ln;                     ║    RETURN                                               ║                                                         ║                                                         
                                                           ║                                                         ║END iterate;                                             ║  END SUBROUTINE                                         ║                                                         ║}                                             
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
void summarize(Patch *P){                                  ║def summarize(P):                                        ║PROCEDURE summarize(VAR p: PPatch);                      ║  SUBROUTINE summarize( )                                ║  public static void  summarize(Patch P){                ║func summarize(P *Patch){                                     
  printf("  summarizing\n");                               ║  print("  summarizing")                                 ║BEGIN                                                    ║    implicit none                                        ║    System.out.println("  summarizing");                 ║                                                    
}                                                          ║                                                         ║  Out.String("  summarizing"); Out.Ln;                   ║    print *,' summarizing'                               ║                                                         ║  fmt.Println("  summarizing")                   
                                                           ║                                                         ║                                                         ║    RETURN                                               ║  }                                                      ║                                                         
                                                           ║                                                         ║END summarize;                                           ║  END SUBROUTINE                                         ║                                                         ║}                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
int main(int argc, char *argv[]){                          ║if __name__ == "__main__":                               ║BEGIN                                                    ║  SUBROUTINE begin( )                                    ║  public static void main (String[] args)    {           ║func main(){                                                    
  Patch *P;                                                ║  print(" Brainiac")                                     ║  Out.String(" Brainiac"); Out.Ln;                       ║    print *,'Brainiac'                                   ║    Patch P;                                             ║  fmt.Println(" Brainiac")                       
                                                           ║  P = initialize()                                       ║                                                         ║    call initialize()                                    ║    System.out.println(" Brainiac");                     ║                                                         
  printf(" Brainiac\n");                                   ║  iterate(P)                                             ║  initialize(P);                                         ║    call iterate()                                       ║    P=initialize(args);                                  ║  P:=initialize()                                            
  P = initialize(argc,argv);                               ║  summarize(P)                                           ║  iterate(P);                                            ║    call summarize()                                     ║    iterate(P);                                          ║  iterate(P)                                           
  iterate(P);                                              ║                                                         ║  summarize(P);                                          ║                                                         ║    summarize(P);                                        ║  summarize(P)                                             
  summarize(P);                                            ║                                                         ║                                                         ║                                                         ║  }                                                      ║                                                         
  return(0);                                               ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
}                                                          ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║  END SUBROUTINE                                         ║                                                         ║                                                         
                                                           ║                                                         ║END Brainiac.                                            ║END PROGRAM Brainiac                                     ║}                                                        ║}                                            
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
                                                           ║                                                         ║                                                         ║                                                         ║                                                         ║                                                         
